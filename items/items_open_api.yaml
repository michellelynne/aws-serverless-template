swagger: 2.0
info:
  title: Item
basePath: /
schemes:
- https
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody : true
    validateRequestParameters : true
securityDefinitions:
  cognitoUserPool:
    type: apiKey,
    name: "Authorization"
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      type: cognito_user_pools
      providerARNs:
        - arn:aws:cognito-idp:${AWS::Region}:{AWS::AccountId}:userpool/us-east-1_nM3jDJ2ZB
paths:
  /items:
    post:
      x-amazon-apigateway-request-validator: basic
      parameters:
      - in: body
        name: Provider
        required: true
        schema:
          "$ref": "#/definitions/Item"
      produces:
      - application/json
      security:
        - cognitoUserPool: []
      responses:
        '200':
          description: "Successful Operation."
          schema:
            $ref: "#/definitions/Item"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/Item'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    get:
      tags:
      - "item"
      summary: "Gets all items"
      description: "Returns all items."
      operationId: "getItems"
      produces:
      - "application/json"
      responses:
        '200':
          description: "Successful Operation."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Item"
      security:
        - cognitoUserPool: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: aws_proxy
  /items/{ID}:
    get:
      tags:
      - "item"
      summary: "Find item by ID."
      description: "Returns a single item."
      operationId: "getItemById"
      produces:
      - "application/json"
      parameters:
      - name: "ID"
        in: "path"
        description: "ID for a item."
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: "Successful operation."
        '400':
          description: "Invalid ID supplied."
        '404':
          description: "Item not found."
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: aws_proxy
    put:
      tags:
      - "item"
      summary: "Update an existing item."
      description: ""
      operationId: "updateItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "ID"
        description: "ID for a Item."
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Item object that needs to be updated."
        required: true
        schema:
          $ref: "#/definitions/Item"
      responses:
        '200':
          description: "Successful operation."
          schema:
            $ref: "#/definitions/Item"
        '400':
          description: "Invalid ID supplied."
        '404':
          description: "Item not found."
        '405':
          description: "Validation exception."
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: PUT
        type: aws_proxy
    delete:
      tags:
      - "item"
      summary: "Update an existing item."
      description: ""
      operationId: "updateItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "ID"
        description: "ID for an Item."
        required: true
        type: "integer"
        format: "int64"
      responses:
        '200':
          description: "Successful operation."
          schema:
            $ref: "#/definitions/Item"
        '400':
          description: "Invalid ID supplied."
        '404':
          description: "Item not found."
        '405':
          description: "Validation exception."
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ItemsFunction.Arn}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: DELETE
        type: aws_proxy
definitions:
  Item:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      attribute:
        type: "string"
        description: "Any attribute"